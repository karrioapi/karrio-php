<?php
/**
 * CarrierSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Purplship
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Purplship Open Source Multi-carrier Shipping API
 *
 * Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services  The **proxy** endpoints are stateless and forwards calls to carriers web services.
 *
 * OpenAPI spec version: v1-2021.2
 * Contact: hello@purplship.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.24
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Purplship\Model;

use \ArrayAccess;
use \Purplship\ObjectSerializer;

/**
 * CarrierSettings Class Doc Comment
 *
 * @category Class
 * @package  Purplship
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CarrierSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CarrierSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'carrier_name' => 'string',
'carrier_id' => 'string',
'test' => 'bool',
'active' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'carrier_name' => null,
'carrier_id' => null,
'test' => null,
'active' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'carrier_name' => 'carrier_name',
'carrier_id' => 'carrier_id',
'test' => 'test',
'active' => 'active'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'carrier_name' => 'setCarrierName',
'carrier_id' => 'setCarrierId',
'test' => 'setTest',
'active' => 'setActive'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'carrier_name' => 'getCarrierName',
'carrier_id' => 'getCarrierId',
'test' => 'getTest',
'active' => 'getActive'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CARRIER_NAME_ARAMEX = 'aramex';
const CARRIER_NAME_AUSTRALIAPOST = 'australiapost';
const CARRIER_NAME_CANADAPOST = 'canadapost';
const CARRIER_NAME_CANPAR = 'canpar';
const CARRIER_NAME_DHL_EXPRESS = 'dhl_express';
const CARRIER_NAME_DHL_UNIVERSAL = 'dhl_universal';
const CARRIER_NAME_DICOM = 'dicom';
const CARRIER_NAME_FEDEX_EXPRESS = 'fedex_express';
const CARRIER_NAME_PUROLATOR_COURIER = 'purolator_courier';
const CARRIER_NAME_ROYALMAIL = 'royalmail';
const CARRIER_NAME_SENDLE = 'sendle';
const CARRIER_NAME_SF_EXPRESS = 'sf_express';
const CARRIER_NAME_UPS_PACKAGE = 'ups_package';
const CARRIER_NAME_USPS = 'usps';
const CARRIER_NAME_YANWEN = 'yanwen';
const CARRIER_NAME_YUNEXPRESS = 'yunexpress';
const CARRIER_NAME_FREIGHTCOM = 'freightcom';
const CARRIER_NAME_ESHIPPER = 'eshipper';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCarrierNameAllowableValues()
    {
        return [
            self::CARRIER_NAME_ARAMEX,
self::CARRIER_NAME_AUSTRALIAPOST,
self::CARRIER_NAME_CANADAPOST,
self::CARRIER_NAME_CANPAR,
self::CARRIER_NAME_DHL_EXPRESS,
self::CARRIER_NAME_DHL_UNIVERSAL,
self::CARRIER_NAME_DICOM,
self::CARRIER_NAME_FEDEX_EXPRESS,
self::CARRIER_NAME_PUROLATOR_COURIER,
self::CARRIER_NAME_ROYALMAIL,
self::CARRIER_NAME_SENDLE,
self::CARRIER_NAME_SF_EXPRESS,
self::CARRIER_NAME_UPS_PACKAGE,
self::CARRIER_NAME_USPS,
self::CARRIER_NAME_YANWEN,
self::CARRIER_NAME_YUNEXPRESS,
self::CARRIER_NAME_FREIGHTCOM,
self::CARRIER_NAME_ESHIPPER,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['carrier_name'] = isset($data['carrier_name']) ? $data['carrier_name'] : null;
        $this->container['carrier_id'] = isset($data['carrier_id']) ? $data['carrier_id'] : null;
        $this->container['test'] = isset($data['test']) ? $data['test'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['carrier_name'] === null) {
            $invalidProperties[] = "'carrier_name' can't be null";
        }
        $allowedValues = $this->getCarrierNameAllowableValues();
        if (!is_null($this->container['carrier_name']) && !in_array($this->container['carrier_name'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'carrier_name', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['carrier_id'] === null) {
            $invalidProperties[] = "'carrier_id' can't be null";
        }
        if ($this->container['test'] === null) {
            $invalidProperties[] = "'test' can't be null";
        }
        if ($this->container['active'] === null) {
            $invalidProperties[] = "'active' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id A unique address identifier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets carrier_name
     *
     * @return string
     */
    public function getCarrierName()
    {
        return $this->container['carrier_name'];
    }

    /**
     * Sets carrier_name
     *
     * @param string $carrier_name Indicates a carrier (type)
     *
     * @return $this
     */
    public function setCarrierName($carrier_name)
    {
        $allowedValues = $this->getCarrierNameAllowableValues();
        if (!in_array($carrier_name, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'carrier_name', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['carrier_name'] = $carrier_name;

        return $this;
    }

    /**
     * Gets carrier_id
     *
     * @return string
     */
    public function getCarrierId()
    {
        return $this->container['carrier_id'];
    }

    /**
     * Sets carrier_id
     *
     * @param string $carrier_id Indicates a specific carrier configuration name.
     *
     * @return $this
     */
    public function setCarrierId($carrier_id)
    {
        $this->container['carrier_id'] = $carrier_id;

        return $this;
    }

    /**
     * Gets test
     *
     * @return bool
     */
    public function getTest()
    {
        return $this->container['test'];
    }

    /**
     * Sets test
     *
     * @param bool $test The test flag indicates whether to use a carrier configured for test.
     *
     * @return $this
     */
    public function setTest($test)
    {
        $this->container['test'] = $test;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active The active flag indicates whether the carrier account is active or not.
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
