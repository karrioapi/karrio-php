<?php
/**
 * Rate
 *
 * PHP version 5
 *
 * @category Class
 * @package  Purplship
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Purplship Open Source Multi-carrier Shipping API
 *
 * Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services  The **proxy** endpoints are stateless and forwards calls to carriers web services.
 *
 * OpenAPI spec version: v1-2021.2
 * Contact: hello@purplship.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.24
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Purplship\Model;

use \ArrayAccess;
use \Purplship\ObjectSerializer;

/**
 * Rate Class Doc Comment
 *
 * @category Class
 * @description The list of returned rates
 * @package  Purplship
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Rate implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Rate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'carrier_name' => 'string',
'carrier_id' => 'string',
'currency' => 'string',
'service' => 'string',
'discount' => 'float',
'base_charge' => 'float',
'total_charge' => 'float',
'duties_and_taxes' => 'float',
'transit_days' => 'int',
'extra_charges' => '\Purplship\Model\Charge[]',
'meta' => 'object',
'carrier_ref' => 'string',
'test_mode' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'carrier_name' => null,
'carrier_id' => null,
'currency' => null,
'service' => null,
'discount' => null,
'base_charge' => null,
'total_charge' => null,
'duties_and_taxes' => null,
'transit_days' => null,
'extra_charges' => null,
'meta' => null,
'carrier_ref' => null,
'test_mode' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'carrier_name' => 'carrier_name',
'carrier_id' => 'carrier_id',
'currency' => 'currency',
'service' => 'service',
'discount' => 'discount',
'base_charge' => 'base_charge',
'total_charge' => 'total_charge',
'duties_and_taxes' => 'duties_and_taxes',
'transit_days' => 'transit_days',
'extra_charges' => 'extra_charges',
'meta' => 'meta',
'carrier_ref' => 'carrier_ref',
'test_mode' => 'test_mode'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'carrier_name' => 'setCarrierName',
'carrier_id' => 'setCarrierId',
'currency' => 'setCurrency',
'service' => 'setService',
'discount' => 'setDiscount',
'base_charge' => 'setBaseCharge',
'total_charge' => 'setTotalCharge',
'duties_and_taxes' => 'setDutiesAndTaxes',
'transit_days' => 'setTransitDays',
'extra_charges' => 'setExtraCharges',
'meta' => 'setMeta',
'carrier_ref' => 'setCarrierRef',
'test_mode' => 'setTestMode'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'carrier_name' => 'getCarrierName',
'carrier_id' => 'getCarrierId',
'currency' => 'getCurrency',
'service' => 'getService',
'discount' => 'getDiscount',
'base_charge' => 'getBaseCharge',
'total_charge' => 'getTotalCharge',
'duties_and_taxes' => 'getDutiesAndTaxes',
'transit_days' => 'getTransitDays',
'extra_charges' => 'getExtraCharges',
'meta' => 'getMeta',
'carrier_ref' => 'getCarrierRef',
'test_mode' => 'getTestMode'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['carrier_name'] = isset($data['carrier_name']) ? $data['carrier_name'] : null;
        $this->container['carrier_id'] = isset($data['carrier_id']) ? $data['carrier_id'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['service'] = isset($data['service']) ? $data['service'] : null;
        $this->container['discount'] = isset($data['discount']) ? $data['discount'] : null;
        $this->container['base_charge'] = isset($data['base_charge']) ? $data['base_charge'] : null;
        $this->container['total_charge'] = isset($data['total_charge']) ? $data['total_charge'] : null;
        $this->container['duties_and_taxes'] = isset($data['duties_and_taxes']) ? $data['duties_and_taxes'] : null;
        $this->container['transit_days'] = isset($data['transit_days']) ? $data['transit_days'] : null;
        $this->container['extra_charges'] = isset($data['extra_charges']) ? $data['extra_charges'] : null;
        $this->container['meta'] = isset($data['meta']) ? $data['meta'] : null;
        $this->container['carrier_ref'] = isset($data['carrier_ref']) ? $data['carrier_ref'] : null;
        $this->container['test_mode'] = isset($data['test_mode']) ? $data['test_mode'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['carrier_name'] === null) {
            $invalidProperties[] = "'carrier_name' can't be null";
        }
        if ($this->container['carrier_id'] === null) {
            $invalidProperties[] = "'carrier_id' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['test_mode'] === null) {
            $invalidProperties[] = "'test_mode' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id A unique identifier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets carrier_name
     *
     * @return string
     */
    public function getCarrierName()
    {
        return $this->container['carrier_name'];
    }

    /**
     * Sets carrier_name
     *
     * @param string $carrier_name The rate's carrier
     *
     * @return $this
     */
    public function setCarrierName($carrier_name)
    {
        $this->container['carrier_name'] = $carrier_name;

        return $this;
    }

    /**
     * Gets carrier_id
     *
     * @return string
     */
    public function getCarrierId()
    {
        return $this->container['carrier_id'];
    }

    /**
     * Sets carrier_id
     *
     * @param string $carrier_id The targeted carrier's name (unique identifier)
     *
     * @return $this
     */
    public function setCarrierId($carrier_id)
    {
        $this->container['carrier_id'] = $carrier_id;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency The rate monetary values currency code
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets service
     *
     * @return string
     */
    public function getService()
    {
        return $this->container['service'];
    }

    /**
     * Sets service
     *
     * @param string $service The carrier's rate (quote) service
     *
     * @return $this
     */
    public function setService($service)
    {
        $this->container['service'] = $service;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return float
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param float $discount The monetary amount of the discount on the rate
     *
     * @return $this
     */
    public function setDiscount($discount)
    {
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets base_charge
     *
     * @return float
     */
    public function getBaseCharge()
    {
        return $this->container['base_charge'];
    }

    /**
     * Sets base_charge
     *
     * @param float $base_charge The rate's monetary amount of the base charge.<br/> This is the net amount of the rate before additional charges
     *
     * @return $this
     */
    public function setBaseCharge($base_charge)
    {
        $this->container['base_charge'] = $base_charge;

        return $this;
    }

    /**
     * Gets total_charge
     *
     * @return float
     */
    public function getTotalCharge()
    {
        return $this->container['total_charge'];
    }

    /**
     * Sets total_charge
     *
     * @param float $total_charge The rate's monetary amount of the total charge.<br/> This is the gross amount of the rate after adding the additional charges
     *
     * @return $this
     */
    public function setTotalCharge($total_charge)
    {
        $this->container['total_charge'] = $total_charge;

        return $this;
    }

    /**
     * Gets duties_and_taxes
     *
     * @return float
     */
    public function getDutiesAndTaxes()
    {
        return $this->container['duties_and_taxes'];
    }

    /**
     * Sets duties_and_taxes
     *
     * @param float $duties_and_taxes The monetary amount of the duties and taxes if applied
     *
     * @return $this
     */
    public function setDutiesAndTaxes($duties_and_taxes)
    {
        $this->container['duties_and_taxes'] = $duties_and_taxes;

        return $this;
    }

    /**
     * Gets transit_days
     *
     * @return int
     */
    public function getTransitDays()
    {
        return $this->container['transit_days'];
    }

    /**
     * Sets transit_days
     *
     * @param int $transit_days The estimated delivery transit days
     *
     * @return $this
     */
    public function setTransitDays($transit_days)
    {
        $this->container['transit_days'] = $transit_days;

        return $this;
    }

    /**
     * Gets extra_charges
     *
     * @return \Purplship\Model\Charge[]
     */
    public function getExtraCharges()
    {
        return $this->container['extra_charges'];
    }

    /**
     * Sets extra_charges
     *
     * @param \Purplship\Model\Charge[] $extra_charges list of the rate's additional charges
     *
     * @return $this
     */
    public function setExtraCharges($extra_charges)
    {
        $this->container['extra_charges'] = $extra_charges;

        return $this;
    }

    /**
     * Gets meta
     *
     * @return object
     */
    public function getMeta()
    {
        return $this->container['meta'];
    }

    /**
     * Sets meta
     *
     * @param object $meta provider specific metadata
     *
     * @return $this
     */
    public function setMeta($meta)
    {
        $this->container['meta'] = $meta;

        return $this;
    }

    /**
     * Gets carrier_ref
     *
     * @return string
     */
    public function getCarrierRef()
    {
        return $this->container['carrier_ref'];
    }

    /**
     * Sets carrier_ref
     *
     * @param string $carrier_ref The system carrier configuration id
     *
     * @return $this
     */
    public function setCarrierRef($carrier_ref)
    {
        $this->container['carrier_ref'] = $carrier_ref;

        return $this;
    }

    /**
     * Gets test_mode
     *
     * @return bool
     */
    public function getTestMode()
    {
        return $this->container['test_mode'];
    }

    /**
     * Sets test_mode
     *
     * @param bool $test_mode Specified whether it was created with a carrier in test mode
     *
     * @return $this
     */
    public function setTestMode($test_mode)
    {
        $this->container['test_mode'] = $test_mode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
